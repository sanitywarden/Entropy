require "src.scripts.data.stringutil"
require "src.scripts.data.colours"

Functionality = {
    selected_building, -- Selected building from menu

    shouldOpen = function()
        if isKeyPressed("B") and not isInterfaceVisible("component_building_menu") then
            showInterface("component_building_menu")
            selected_building = nil
        end
    end,
    shouldClose = function()
        if isKeyPressed("B") and isInterfaceVisible("component_building_menu") then
            hideInterface("component_building_menu")
            selected_building = nil
        end
    end,
    onMouseButtonPress = function ()
        if isRightMouseButtonPressed() then
            selected_building = nil
        end

        if isLeftMouseButtonPressed() then
            if selected_building ~= nil then
                regionmap = getRegionmap()
                region = getRegion(regionmap.region_index)
                
                if inRegionBounds(regionmap.current_tile_index) and not mouseIntersectsUI() then 
                    selected_building.object_colour = COLOUR_BLACK
                    region:constructBuilding(selected_building, regionmap.current_tile_index)
                end
            end
        end
    end,
    render = function()
        if selected_building ~= nil then    
            regionmap = getRegionmap()
            region = getRegion(regionmap.region_index)

            if inRegionBounds(regionmap.current_tile_index) then 
                tile = region:getTileAt(regionmap.current_tile_index)
                
                a1_w = 0
                a1_h = tile.object_size.y
                r_w  = tile.object_size.x * 0.5
                r_h  = tile.object_size.y
                n    = selected_building.area.x

                offset = Vector3i(0, 0, 0)
                if n > 0 then
                    offset.x = -(a1_w + (n - 1) * r_w)
                    offset.y = -(a1_h + (n - 1) * r_h)
                    offset.z = 0
                end

                selected_building.object_position = Vector3i(
                    tile.object_position.x + offset.x,
                    tile.object_position.y + offset.y,
                    tile.object_position.z + offset.z
                ) 
                
                if region:isBuildingPositionValid(selected_building, regionmap.current_tile_index) then
                    selected_building.object_colour = COLOUR_BLACK
                else
                    selected_building.object_colour = COLOUR_RED
                end
                
                drawBuilding(selected_building)
            end
        end
    end,

    components = {
        {
            id = "imagelist_building_icons",

            onShow = function()
                list_component = getComponentImageList("component_building_menu", "imagelist_building_icons")
                list = {}
                
                for i = 1, rawlen(gamedata.BUILDING_TABLE), 1 do
                    building = gamedata.BUILDING_TABLE[i]
                    table.insert(list, building.icon)
                end
            
                list_component:setImageList(list)
            end,

            update = function()
                page_id = getInterfaceUnderMouse()
                component_id = getInterfaceItemUnderMouse(page_id)

                if isLeftMouseButtonPressed() then
                    if startsWith(component_id, "image_icon") then
                        building_texture = readAfter(component_id, "image_icon_")

                        for i = 1, rawlen(gamedata.BUILDING_TABLE), 1 do
                            if building_texture == gamedata.BUILDING_TABLE[i].texture then
                                selected_building = gamedata.BUILDING_TABLE[i]
                            end
                        end
                    end
                end
            end
        }
    }
}